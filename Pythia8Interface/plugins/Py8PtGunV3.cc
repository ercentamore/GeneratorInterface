#include "GeneratorInterface/Core/interface/GeneratorFilter.h"
#include "GeneratorInterface/ExternalDecays/interface/ExternalDecayDriver.h"
#include "GeneratorInterface/Pythia8Interface/interface/Py8GunBase.h"
#include <numeric>

namespace gen {

class Py8PtGunV3 : public Py8GunBase {

   public:

      Py8PtGunV3( edm::ParameterSet const& );
      ~Py8PtGunV3() {}

      bool generatePartonsAndHadronize() override;
      const char* classname() const override;

   private:

      // PtGun particle(s) characteristics
      double  fMinEta;
      double  fMaxEta;
      double  fMinPt ;
      double  fMaxPt ;
      double  fMinMass ;
      double  fMaxMass ;
      bool    fAddAntiParticle;

};

// implementation
//
Py8PtGunV3::Py8PtGunV3( edm::ParameterSet const& ps )
   : Py8GunBase(ps)
{

   // ParameterSet defpset ;
   edm::ParameterSet pgun_params =
      ps.getParameter<edm::ParameterSet>("PGunParameters"); // , defpset ) ;
   fMinEta     = pgun_params.getParameter<double>("MinEta"); // ,-2.2);
   fMaxEta     = pgun_params.getParameter<double>("MaxEta"); // , 2.2);
   fMinPt      = pgun_params.getParameter<double>("MinPt"); // ,  0.);
   fMaxPt      = pgun_params.getParameter<double>("MaxPt"); // ,  0.);
   fMinMass    = pgun_params.getParameter<double>("MinMass"); // ,  0.);
   fMaxMass    = pgun_params.getParameter<double>("MaxMass"); // ,  0.);
   fAddAntiParticle = pgun_params.getParameter<bool>("AddAntiParticle"); //, false) ;

}

int sum(std::vector <int> dist) {
    return std::accumulate(dist.begin(), dist.end(), 0);
}

double max_element(std::vector <double> dist) {
    double max = 0;
    int s = dist.size();
    for (int i = 0; i < s; i++) {
        double el = dist[i];
        if (max < el){max = el;}
    }
    return max;
}

std::vector <double> get_inverse_pdf(std::vector <int> dist) {
    std::vector <double> invpdf(dist.size());
    double sum_hist = sum(dist);
    int s = dist.size();
    for (int i = 0; i < s; i++) {
        if (dist[i] != 0 ) {
            invpdf[i] = sum_hist / dist[i];
            //std::cout << "Bin " << i << " -> " << invpdf[i] << std::endl;
        }
        else {invpdf[i] = 1;}
    }
    double max_invpdf = max_element(invpdf);
    for (int i = 0; i < s; i++) {
        invpdf[i] = invpdf[i] / max_invpdf;
    }
    return invpdf;
}

double lookup_mass_invpdf(double mgen, std::vector <double> m_bins, std::vector <double> m_invpdf) {
    int im = 0;
    int s1 = m_bins.size();
    int s2 = m_invpdf.size();
    for (int ib = 0; ib < s1; ib++) {
        im = ib;
        if (ib + 1 >  s2 - 1) { break; }
        if (mgen <= m_bins[ib]) { break; }
    }
    return m_invpdf[im];
}

double lookup_pt_invpdf(double pTgen, std::vector <int> pT_bins, std::vector <double> pT_invpdf) {
    int ipt = 0;
    int s1 = pT_bins.size();
    int s2 = pT_invpdf.size();
    for (int ib = 0; ib < s1; ib++) {
        ipt = ib;
        if (ib + 1 >  s2 - 1) { break; }
        if (pTgen <= pT_bins[ib]) { break; }
    }
    return pT_invpdf[ipt];
}

double lookup_invpdf(double Mgen, std::vector <double> M_bins, double pTgen, std::vector <int> pT_bins, std::vector <double> invpdf) {
    unsigned int ibin = 0;
    unsigned int m1  = M_bins.size();
    unsigned int pt1 = pT_bins.size();
    unsigned int inv = invpdf.size();
    bool found_mass = false;
    bool found_end  = false;
    for (unsigned int ibx = 0; ibx < m1; ibx++) {
        if (found_mass || found_end) { break; }
        for (unsigned int iby = 0; iby < pt1; iby++) {
            ibin = (ibx*pt1)+ iby;
            if ( ((ibx*pt1) + iby + 1) >  (inv - 1) ) {
                found_end = true;
                break;
            }
            if ( (Mgen  <= M_bins[ibx]) && (pTgen <= pT_bins[iby]) ) {
                found_mass = true;
                break;
            }
        }
    }
    return invpdf[ibin];
}

double get_rand_el(std::vector <int> dist) {
    int randomIndex = rand() % dist.size();
      return dist[randomIndex];
}

std::vector <int> pT_bins   = {35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300};
std::vector <double> m_bins = {4.0, 4.4, 4.8, 5.2, 5.6, 6.0, 6.4, 6.8, 7.2, 7.6, 8.0, 8.4, 8.8, 9.2, 9.6, 10.0, 10.4, 10.8, 11.2, 11.6, 12.0, 12.4, 12.8, 13.2, 13.6, 14.0, 14.4, 14.8, 15.2, 15.6, 16.0, 16.4, 16.8, 17.2, 17.6, 18};
std::vector <int> occ =
{/*35    40    45    50   55    60     65    70    75    80    85    90    95    100   105   110  115    120   125   130   135   140   145   150   155   160   165  170    175   180   185   190   195  200    205    210  215   220   225   230   235   240   245   250   255   260  265    270   275   280  285    290   295   300 */
  8756, 8931, 8730, 8679, 8789, 8674, 8647, 8708, 8829, 8688, 9185, 8729, 8870, 8608, 8551, 8674, 8848, 8805, 8782, 8764, 8713, 8745, 8783, 8699, 8819, 8773, 8742, 8752, 8778, 8706, 8801, 9036, 8937, 8827, 8764, 8807, 8702, 8994, 8736, 8913, 9018, 8722, 8965, 8838, 9024, 8684, 8897, 8713, 8700, 8857, 8829, 8924, 8825, 8699,
  10100, 9858, 10010, 10379, 10171, 10122, 10323, 10158, 10019, 10337, 10143, 10015, 9940, 10131, 10054, 10121, 9862, 9863, 10175, 10237, 10169, 10077, 10249, 10038, 10057, 10096, 10116, 9971, 10141, 10226, 10078, 10092, 10209, 10190, 10111, 9868, 9880, 9984, 10131, 10203, 9951, 9905, 10136, 10230, 10098, 9975, 10076, 10160, 10115, 10092, 10350, 9978, 9903, 10115,
  9891, 9937, 9801, 10044, 10093, 9796, 9820, 9892, 9832, 9843, 9819, 9936, 9631, 10031, 10024, 9832, 10216, 10292, 9782, 10231, 9938, 9738, 10111, 10050, 9776, 9780, 9872, 9814, 9928, 10024, 10231, 9967, 9879, 9884, 10135, 10040, 9788, 9988, 10024, 10083, 9975, 9788, 9901, 9774, 9593, 9917, 10073, 9917, 10008, 9850, 9769, 9733, 10064, 9916,
  9803, 9802, 9807, 9738, 10072, 9752, 9727, 9517, 9890, 9944, 9858, 9704, 9452, 9827, 10039, 9937, 9671, 9870, 9759, 9882, 9881, 9926, 9719, 10015, 9489, 9750, 9662, 9839, 9835, 9901, 9842, 9763, 9968, 9561, 9624, 9790, 10084, 9816, 10049, 9947, 9958, 9706, 9957, 9745, 9822, 9803, 9824, 9998, 9586, 9841, 9560, 9777, 9507, 10143,
  9763, 9610, 9613, 9592, 9966, 9729, 9550, 9750, 9688, 9716, 9423, 9956, 10104, 9867, 9726, 9585, 9703, 9701, 9793, 9799, 9713, 9729, 9631, 9640, 9398, 9456, 9943, 10014, 10005, 9571, 9755, 9697, 9651, 9567, 9674, 9749, 9525, 9644, 9564, 9715, 9498, 9759, 9571, 9797, 9607, 9948, 9600, 9810, 9611, 9695, 9821, 9763, 9825, 9773,
  9447, 9498, 9724, 9376, 9505, 9804, 9956, 9509, 9623, 9660, 9838, 9534, 9544, 9753, 9597, 9441, 9684, 9649, 9905, 9703, 9647, 9716, 9442, 9628, 9817, 9577, 9528, 9626, 9621, 9356, 9705, 9627, 9575, 9739, 9653, 9813, 9747, 9717, 9615, 9759, 9731, 9655, 9331, 9625, 9585, 9573, 9707, 9790, 9591, 9429, 9612, 9557, 9584, 9469,
  9578, 9659, 9631, 9378, 9736, 9556, 9598, 9509, 9671, 9747, 9606, 9571, 9418, 9174, 9607, 9360, 9532, 9417, 9417, 9535, 9537, 9482, 9503, 9297, 9464, 9654, 9724, 9488, 9639, 9484, 9479, 9643, 9816, 9605, 9668, 9698, 9494, 9421, 9495, 9474, 9423, 9501, 9535, 9566, 9738, 9458, 9604, 9539, 9712, 9481, 9396, 9527, 9514, 9507,
  9408, 9186, 9498, 9249, 9475, 9492, 9445, 9289, 9385, 9602, 9485, 9336, 9368, 9479, 9360, 9353, 9381, 9323, 9416, 9302, 9519, 9619, 9343, 9477, 9545, 9534, 9358, 9494, 9688, 9535, 9348, 9251, 9419, 9327, 9459, 9389, 9325, 9238, 9440, 9326, 9469, 9268, 9450, 9484, 9280, 9539, 9743, 9464, 9387, 9440, 9259, 9393, 9360, 9241,
  9294, 9535, 9506, 9297, 9440, 9313, 9328, 9380, 9093, 9271, 9389, 9323, 9518, 9251, 9357, 9439, 9317, 9348, 9114, 9330, 9259, 9111, 9115, 9391, 9427, 9509, 9429, 9415, 9301, 9340, 9324, 9278, 9280, 9160, 9350, 9176, 9347, 9227, 9292, 9539, 9484, 9366, 9367, 9503, 9349, 9253, 9328, 9384, 9349, 9012, 9419, 9280, 9503, 9457,
  9222, 9175, 9196, 9359, 9078, 9167, 9186, 9098, 9447, 9370, 9527, 9245, 9278, 9280, 9247, 9094, 9332, 9364, 9334, 9298, 9437, 9371, 9132, 9463, 9098, 9181, 9477, 9131, 8977, 9251, 9246, 9262, 9394, 9352, 9286, 9363, 9180, 9370, 9484, 9271, 9333, 9301, 9168, 9308, 9224, 9547, 9345, 9171, 9454, 9228, 8998, 9206, 9365, 9191,
  9091, 9093, 9346, 9222, 9152, 9302, 9046, 9263, 9344, 9408, 9238, 8800, 9297, 9437, 9112, 9083, 9092, 9094, 9273, 9164, 9320, 9319, 9181, 9214, 9537, 9313, 9016, 9020, 9199, 9091, 9548, 9156, 9223, 9205, 9199, 8930, 9206, 9259, 9426, 9341, 9157, 9139, 9178, 9140, 9374, 9032, 9395, 9221, 9255, 9311, 9231, 9222, 9168, 9148,
  9173, 8925, 9217, 9191, 9267, 9365, 9075, 9237, 9187, 8901, 9085, 8917, 9309, 9135, 9080, 9084, 9280, 8954, 9162, 9088, 9060, 9028, 9109, 9193, 9126, 9338, 8864, 9164, 9223, 9144, 9115, 9128, 9260, 9082, 9330, 9082, 9507, 9167, 9127, 8917, 9350, 8838, 9001, 9309, 8992, 9295, 9067, 9231, 9122, 9081, 9081, 9087, 8979, 9107,
  9217, 8731, 9207, 9108, 9215, 9096, 9010, 9107, 9045, 9280, 9004, 9205, 9135, 9254, 8988, 9258, 9083, 8930, 9039, 9086, 9325, 8962, 9146, 9261, 8990, 8892, 8881, 9085, 9308, 8934, 9162, 9112, 9241, 9317, 9184, 8974, 9060, 9164, 9063, 8831, 8991, 9112, 9123, 9028, 9158, 9066, 8997, 9136, 8999, 8950, 9148, 8971, 9246, 8949,
  9151, 9126, 9101, 8964, 8946, 8981, 9096, 8973, 9054, 8980, 8933, 9192, 8962, 9097, 8838, 9086, 9103, 8703, 9008, 9009, 9161, 8790, 9086, 9076, 9037, 8914, 8880, 9138, 8847, 8856, 8912, 8859, 9023, 9095, 8954, 9175, 8813, 9149, 9042, 8841, 9020, 9087, 9027, 9024, 9126, 8848, 9225, 9028, 8969, 9349, 9004, 9059, 8960, 9207,
  8923, 9169, 8865, 8998, 8945, 9090, 9149, 8969, 9153, 9287, 8969, 8896, 8978, 8731, 8909, 9074, 9079, 8864, 9175, 8984, 8994, 9164, 8913, 9253, 8936, 9050, 8997, 9036, 8968, 9099, 8997, 9205, 8971, 9128, 8959, 8870, 9038, 8908, 9007, 9089, 8662, 8942, 8730, 8947, 8937, 8967, 8827, 9062, 8957, 8972, 9064, 9167, 8939, 8956,
  8840, 8841, 9058, 8898, 8993, 8902, 8900, 8919, 8873, 8807, 8883, 8915, 9079, 8955, 8951, 8850, 9062, 8806, 8801, 9239, 8878, 9017, 9096, 9103, 8652, 8795, 9001, 8691, 8829, 9001, 8785, 8777, 8859, 8956, 8956, 9028, 8680, 9074, 8913, 8964, 9004, 8641, 9121, 8866, 8777, 8867, 8819, 8932, 8889, 8833, 9044, 8938, 8885, 8981,
  8934, 8684, 8670, 8971, 8871, 8941, 8924, 8903, 9053, 8876, 8973, 8847, 9099, 8587, 8919, 8818, 9035, 8772, 9071, 8795, 8933, 8895, 8896, 8812, 8737, 8977, 8798, 8939, 8708, 8731, 8838, 8809, 9022, 8983, 8945, 8817, 8838, 9032, 9015, 8943, 8695, 8779, 8839, 8873, 8628, 8770, 8989, 9022, 9001, 9141, 8943, 9031, 8882, 8813,
  8800, 8790, 8835, 8936, 8960, 8683, 8720, 8800, 9049, 8686, 8651, 9002, 8927, 8874, 8896, 8805, 8870, 8792, 8626, 8783, 9082, 8973, 8859, 8920, 8611, 8807, 8789, 8926, 8976, 8823, 8653, 8673, 8689, 8729, 8679, 8906, 8701, 8781, 8810, 8928, 8629, 8860, 8705, 8767, 8660, 8702, 8736, 8700, 8781, 8986, 9037, 9018, 8970, 9006,
  8714, 8737, 8855, 8815, 8855, 8632, 8634, 8864, 8965, 8636, 8732, 8851, 8911, 8848, 8910, 8696, 8762, 8800, 8797, 8980, 8827, 8612, 8812, 8530, 8756, 8722, 8926, 8686, 8600, 8778, 8992, 8646, 8844, 8852, 8826, 8640, 8877, 8790, 8665, 8656, 8892, 8688, 8989, 8599, 8664, 8795, 8553, 8832, 8791, 8658, 8790, 8950, 8748, 8897,
  8728, 8899, 8993, 8802, 8691, 8606, 8552, 8836, 8462, 8753, 8771, 8850, 8659, 8872, 8936, 8558, 8514, 8813, 8683, 8654, 8638, 8447, 8722, 8674, 8774, 8850, 8946, 8656, 9014, 8591, 8582, 8714, 8760, 8600, 8559, 8807, 8638, 8667, 8534, 9086, 8541, 8595, 8656, 8686, 8650, 8814, 8681, 8625, 8902, 8708, 8943, 8767, 8772, 8713,
  8623, 8777, 8564, 8772, 8668, 8865, 8753, 8531, 8648, 8854, 8716, 8476, 8364, 8697, 8711, 8830, 8729, 8748, 8678, 8688, 8816, 8644, 8713, 8454, 8659, 8670, 8712, 8375, 8670, 8811, 8662, 8547, 8666, 8952, 8793, 8659, 8743, 8894, 8663, 8564, 8726, 8983, 8674, 8698, 8721, 8733, 8552, 8580, 8950, 8600, 8538, 8933, 8664, 8535,
  8749, 8839, 8668, 8570, 8585, 8529, 8662, 8676, 8603, 8632, 8749, 8779, 8684, 8657, 8627, 8686, 8551, 8668, 8727, 8734, 8868, 8696, 8562, 8797, 8613, 8744, 8644, 8558, 8632, 8694, 8659, 8852, 8565, 8623, 8730, 8615, 8762, 8677, 8485, 8802, 8616, 8619, 8660, 8759, 8636, 8583, 8717, 8671, 8612, 8457, 8610, 8450, 8550, 8632,
  8462, 8599, 8664, 8384, 8593, 8591, 8399, 8497, 8517, 8614, 8628, 8644, 8601, 8668, 8794, 8705, 8743, 8831, 8542, 8572, 8664, 8632, 8446, 8514, 8762, 8608, 8569, 8607, 8437, 8751, 8580, 8606, 8557, 8474, 8536, 8739, 8408, 8651, 8778, 8580, 8575, 8606, 8631, 8517, 8951, 8784, 8606, 8715, 8589, 8541, 8625, 8791, 8451, 8607,
  8736, 8500, 8644, 8547, 8758, 8457, 8386, 8655, 8669, 8502, 8633, 8716, 8682, 8622, 8648, 8917, 8710, 8774, 8568, 8641, 8467, 8589, 8667, 8407, 8576, 8858, 8696, 8678, 8790, 8641, 8676, 8736, 8672, 8550, 8516, 8387, 8744, 8470, 8733, 8637, 8644, 8524, 8755, 8604, 8512, 8560, 8729, 8572, 8556, 8489, 8437, 8552, 8514, 8565,
  8831, 8483, 8611, 8498, 8532, 8591, 8629, 8536, 8452, 8459, 8523, 8681, 8613, 8628, 8557, 8648, 8522, 8383, 8361, 8618, 8572, 8512, 8436, 8577, 8595, 8397, 8711, 8607, 8626, 8619, 8549, 8583, 8812, 8518, 8317, 8671, 8537, 8746, 8506, 8648, 8447, 8366, 8673, 8588, 8647, 8793, 8613, 8528, 8341, 8540, 8462, 8401, 8492, 8472,
  8441, 8569, 8487, 8436, 8434, 8348, 8670, 8408, 8379, 8502, 8433, 8572, 8273, 8440, 8417, 8571, 8666, 8487, 8588, 8482, 8460, 8547, 8519, 8585, 8626, 8347, 8565, 8464, 8337, 8677, 8459, 8430, 8593, 8134, 8565, 8541, 8416, 8422, 8484, 8709, 8550, 8363, 8585, 8435, 8593, 8499, 8454, 8455, 8345, 8718, 8607, 8527, 8445, 8515,
  8528, 8459, 8549, 8495, 8351, 8465, 8522, 8561, 8321, 8443, 8284, 8414, 8482, 8461, 8341, 8718, 8384, 8390, 8462, 8417, 8697, 8353, 8617, 8576, 8519, 8483, 8700, 8670, 8241, 8635, 8554, 8657, 8448, 8570, 8650, 8510, 8547, 8458, 8341, 8628, 8586, 8539, 8479, 8360, 8490, 8730, 8452, 8598, 8542, 8255, 8429, 8485, 8596, 8465,
  8372, 8591, 8510, 8377, 8359, 8509, 8380, 8437, 8337, 8701, 8354, 8341, 8446, 8763, 8450, 8498, 8539, 8725, 8588, 8168, 8580, 8620, 8456, 8535, 8564, 8576, 8464, 8513, 8445, 8241, 8726, 8416, 8358, 8693, 8541, 8560, 8482, 8532, 8366, 8536, 8479, 8333, 8493, 8358, 8423, 8466, 8503, 8430, 8440, 8503, 8759, 8317, 8531, 8722,
  8492, 8367, 8488, 8601, 8340, 8521, 8717, 8579, 8410, 8383, 8409, 8295, 8322, 8382, 8691, 8355, 8336, 8583, 8452, 8449, 8518, 8454, 8384, 8290, 8495, 8537, 8149, 8381, 8418, 8391, 8578, 8379, 8315, 8440, 8651, 8410, 8361, 8411, 8190, 8484, 8539, 8485, 8541, 8430, 8536, 8578, 8359, 8295, 8408, 8423, 8553, 8269, 8810, 8347,
  8278, 8701, 8246, 8522, 8537, 8552, 8378, 8281, 8460, 8387, 8517, 8352, 8346, 8407, 8308, 8334, 8508, 8250, 8333, 8374, 8592, 8443, 8297, 8412, 8190, 8431, 8330, 8492, 8431, 8311, 8398, 8291, 8219, 8379, 8733, 8544, 8404, 8725, 8277, 8585, 8483, 8297, 8354, 8311, 8468, 8469, 8454, 8317, 8362, 8363, 8580, 8505, 8469, 8227,
  8176, 8632, 8505, 8281, 8751, 8413, 8434, 8234, 8280, 8540, 8442, 8492, 8415, 8439, 8448, 8599, 8400, 8389, 8395, 8520, 8598, 8530, 8366, 8353, 8363, 8272, 8612, 8343, 8463, 8339, 8515, 8456, 8179, 8399, 8399, 8501, 8414, 8342, 8233, 8195, 8539, 8428, 8366, 8563, 8440, 8183, 8285, 8373, 8329, 8486, 8497, 8653, 8342, 8226,
  8405, 8396, 8233, 8424, 8425, 8405, 8419, 8337, 8344, 8231, 8313, 8539, 8387, 8339, 8307, 8403, 8412, 8040, 8473, 8433, 8294, 8308, 8561, 8219, 8341, 8446, 8290, 8492, 8224, 8305, 8432, 8317, 8448, 8285, 8575, 8305, 8313, 8585, 8275, 8375, 8292, 8445, 8463, 8457, 8282, 8400, 8516, 8314, 8378, 8584, 8338, 8362, 8438, 8193,
  8225, 8254, 8256, 8530, 8312, 8278, 7995, 8283, 8511, 8361, 8471, 8420, 8271, 8385, 8200, 8427, 8299, 8359, 8409, 8064, 8601, 8299, 8304, 8365, 8264, 8372, 8379, 8341, 8210, 8465, 8470, 8229, 8497, 8265, 8163, 8304, 8432, 8285, 8452, 8407, 8134, 8409, 8337, 8286, 8439, 8330, 8389, 8245, 8403, 8184, 7970, 8297, 8193, 8334,
  8490, 8215, 8247, 8295, 8272, 8360, 8116, 8250, 8220, 8365, 8439, 8423, 8282, 8393, 8171, 8195, 8038, 8085, 8278, 8440, 8523, 8241, 8187, 8343, 8354, 8302, 8176, 8092, 8199, 8427, 8414, 8220, 8371, 8239, 8443, 8228, 8049, 8372, 8475, 8398, 8079, 8380, 8361, 8277, 8128, 8234, 8329, 8419, 8285, 8339, 8354, 8418, 8440, 8483,
  8425, 8474, 8393, 8255, 8342, 8303, 8211, 8200, 8228, 8232, 8126, 8153, 8352, 8552, 8330, 8287, 8343, 8188, 8627, 8480, 8343, 8206, 8525, 8173, 8314, 8273, 8260, 8384, 8396, 8207, 8328, 8353, 8283, 8208, 8353, 8298, 8252, 8341, 8377, 8474, 8395, 8470, 8371, 8376, 8342, 8103, 8235, 8269, 8234, 8287, 8310, 8353, 8437, 8257,
  8230, 8275, 8414, 8450, 8368, 8313, 8192, 8208, 8071, 8174, 8307, 8081, 8113, 8326, 8138, 8329, 8341, 8365, 8139, 8353, 8188, 8157, 8395, 8297, 8092, 8163, 8369, 8150, 8288, 8399, 8037, 8077, 8127, 8119, 8066, 8207, 8149, 8271, 8258, 8343, 8267, 8204, 8305, 8313, 8359, 8124, 8274, 8268, 8215, 8197, 8086, 8449, 8267, 8229
};
std::vector <double> invpdf = get_inverse_pdf(occ);


bool Py8PtGunV3::generatePartonsAndHadronize()
{

   //std::cout << " ! ! UPDATED PYTHIA VERSION ! ! " << std::endl;
   fMasterGen->event.reset();

   for ( size_t i=0; i<fPartIDs.size(); i++ )
   {

      int particleID = fPartIDs[i]; // this is PDG - need to convert to Py8 ???

      double rand_sampler = rand() / double(RAND_MAX);
      double pt           = (fMaxPt-fMinPt) * randomEngine().flat() + fMinPt;
      double mass         = (fMaxMass-fMinMass) * randomEngine().flat() + fMinMass;
      double weight       = lookup_invpdf(mass, m_bins, pt, pT_bins, invpdf);
      while ( rand_sampler > weight ) {
         rand_sampler = rand() / double(RAND_MAX);
         pt           = (fMaxPt-fMinPt) * randomEngine().flat() + fMinPt;
         mass         = (fMaxMass-fMinMass) * randomEngine().flat() + fMinMass;
         weight       = lookup_invpdf(mass, m_bins, pt, pT_bins, invpdf);
      }
      // Calculate angles
      double phi = (fMaxPhi-fMinPhi) * randomEngine().flat() + fMinPhi;
      double eta = (fMaxEta-fMinEta) * randomEngine().flat() + fMinEta;
      double the = 2.*atan(exp(-eta));

      // Calculate momenta
      double pp = pt / sin(the); // sqrt( ee*ee - mass*mass );
      double ee = sqrt( pp*pp + mass*mass );

      double px = pt * cos(phi);
      double py = pt * sin(phi);
      double pz = pp * cos(the);

      if ( !((fMasterGen->particleData).isParticle( particleID )) )
      {
         particleID = std::fabs(particleID) ;
      }

      if( 1<= fabs(particleID) && fabs(particleID) <= 6) // quarks
        (fMasterGen->event).append( particleID, 23, 101, 0, px, py, pz, ee, mass );
      else if (fabs(particleID) == 21)                   // gluons
        (fMasterGen->event).append( 21, 23, 101, 102, px, py, pz, ee, mass );
      else                                               // other
        (fMasterGen->event).append( particleID, 1, 0, 0, px, py, pz, ee, mass );

      // Here also need to add anti-particle (if any)
      // otherwise just add a 2nd particle of the same type
      // (for example, gamma)
      if ( fAddAntiParticle )
      {
        if( 1 <= fabs(particleID) && fabs(particleID) <= 6){ // quarks
          (fMasterGen->event).append( -particleID, 23, 0, 101, -px, -py, -pz, ee, mass );
        }
        else if (fabs(particleID) == 21){                   // gluons
          (fMasterGen->event).append( 21, 23, 102, 101, -px, -py, -pz, ee, mass );
        }
        else if ( (fMasterGen->particleData).isParticle( -particleID ) ){
          (fMasterGen->event).append( -particleID, 1, 0, 0, -px, -py, -pz, ee, mass );
        }
        else {
          (fMasterGen->event).append( particleID, 1, 0, 0, -px, -py, -pz, ee, mass );
        }

      } // antiparticle

   } // fPartIDs

   if ( !fMasterGen->next() ) return false;

   event().reset(new HepMC::GenEvent);
   return toHepMC.fill_next_event( fMasterGen->event, event().get() );

} // generatePartonsAndHadronize()

const char* Py8PtGunV3::classname() const
{
   return "Py8PtGunV3";
}

typedef edm::GeneratorFilter<gen::Py8PtGunV3, gen::ExternalDecayDriver> Pythia8PtGunV3;

} // end namespace

using gen::Pythia8PtGunV3;
DEFINE_FWK_MODULE(Pythia8PtGunV3);
